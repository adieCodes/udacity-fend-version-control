# When would you want to use a remote repository rather than keeping all your work local?

When you're working with other people or on other machines, this allows you to work on the same code base.
 It's also useful as a back up, in case anything were to happen to your machine.

# Why might you want to always pull changes manually rather than having Git automatically stay up-to-date
 with your remote repository?
 
As you don't want changes happening to your code without you at least requesting it, if not authoring it.
 
# Describe the differences between forks, clones, and branches. When would you use one instead of another?
 
**Forks** - This is a construct within Github for cloning a repository but keeping attribution to the
 original repository. Which also means any changes can be 'pulled' into the original code, if the owner
 of the original repository approves. You would then need to **clone** the repo to your local machine.
 
**Clones** - This is for copying an existing code base and is mainly used when continuing work on an existing
 project on a new machine or as a new contributor.
 
**Branch** - A branch is a seperate version of your existing code. This is used for creating new features/
 fixing bugs without impacting the main ("master") branch.
 
# What is the benefit of having a copy of the last known state of the remote stored locally?

It allows you to compare the work you've done to the latest known project state even when offline.

# How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Without using Git/GitHub I'd be reliant on a solution like Dropbox. This would be more flexible but we'd
 need to reply on communicating through Slack or similar. It would be easier to use a tool I have more
 experience with but the power of commits (particularly commit messages and their manual nature) seems
 extremely useful.