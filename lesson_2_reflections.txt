# What happens when you initialise a repository? Why do you need to do it?

Initialising a repository adds the hidden directory **.git**, this keeps all of the meta
 data about historic commits. You need to do this as this is what makes Git work, without it there's no record of the changes made.

# How is the staging area different from the working directory and repository? What value
 do you think it offers?

The staging area allows you to select the files you want to add to a commit, providing far
 greater flexibility and control.

# How can you use the staging area to make sure you have one commit per logical change?

Only stage the files that are involved with the commit, you can add other files with other
 commits after.

# What are some situations when branches would be helpful in keeping your history
 organised? How would branches help?

Branches would be most helpful when adding new features or fixing bugs, as this gives you the ability to make changes without impacting your known working code. You can then merge the two codebases when the new feature is ready and tested.

# How do the diagrams help you visualise the branch structure?

They give you a clear visual demonstration of which branches have access to which commits.

# What is the result of merging two branches together? Why do we represent it in the
 diagram the way we do?

The result of merging two branches is that the two codebases are joined with all the
 changes added. This is done by comparing both branches to their nearest shared parent,
 adding any new lines and removing any deleted lines, it gets a little more complicated but
 that's the basic theory.

We represent it in the diagram as we do because it demonstrates the history of the project
 and the best way to view changes.

# What are the pros and cons of Git's automatic merging vs. always doing merges manually?

The advantage of Git's automatic merging is that it saves a lot of time checking basic
 changes that are almost certainly not causing an issue. If you needed to check each
 contributors additions/removals on a large open source project the project would stop.

The disadvantage is that there can be unforeseen consequences of what seems like a
 trivial addition/removal from the codebase. In this situation it should be relatively easy
 to find the root cause with a `git diff` between the commit's.
